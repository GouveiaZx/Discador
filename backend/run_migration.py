#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os

def run_migration():
    """Executar migra√ß√£o para configura√ß√£o avan√ßada"""
    
    # Ler o arquivo de migra√ß√£o compat√≠vel com SQLite
    migration_file = 'migrations/create_configuracao_discagem_sqlite.sql'
    
    if not os.path.exists(migration_file):
        print(f"‚ùå Arquivo de migra√ß√£o n√£o encontrado: {migration_file}")
        return False
    
    with open(migration_file, 'r', encoding='utf-8') as f:
        sql_content = f.read()

    # Conectar ao banco de dados
    db_path = 'discador.db'
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # Executar as migra√ß√µes
        cursor.executescript(sql_content)
        conn.commit()
        print('‚úÖ Migra√ß√£o executada com sucesso!')
        print('Tabelas criadas/atualizadas:')
        print('- configuracao_discagem')
        print('- trunk (expandida)')
        print('- trunk_status_historico')
        print('- trunk_estatisticas')
        
        # Verificar se as tabelas foram criadas
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name IN ('configuracao_discagem', 'trunk', 'trunk_status_historico', 'trunk_estatisticas')")
        tables = cursor.fetchall()
        print(f'Tabelas encontradas: {[t[0] for t in tables]}')
        
        # Inserir configura√ß√£o padr√£o
        cursor.execute("""
            INSERT OR IGNORE INTO configuracao_discagem 
            (nome, descricao, cps, sleep_time, wait_time, amd_enabled, timezone, horario_inicio, horario_fim, eh_padrao, ativo)
            VALUES 
            ('Configura√ß√£o Padr√£o', 'Configura√ß√£o padr√£o do sistema', 5.0, 1.0, 30.0, 1, 'America/Sao_Paulo', '08:00', '18:00', 1, 1)
        """)
        
        # Inserir trunk padr√£o se n√£o existir
        cursor.execute("""
            INSERT OR IGNORE INTO trunk 
            (nome, descricao, host, porta, usuario, senha, codigo_dv, caller_ids, balanceamento, failover_enabled, 
             protocolo, capacidade_maxima, prioridade, status, ativo)
            VALUES 
            ('Trunk Principal', 'Trunk SIP principal do sistema', 'sip.provedor.com', 5060, 'usuario', 'senha', '10-digit', 
             '["5511999888777", "5511888777666"]', 'round_robin', 1, 'UDP', 100, 1, 'unknown', 1)
        """)
        
        # Inserir configura√ß√£o avan√ßada
        cursor.execute("""
            INSERT OR IGNORE INTO configuracao_discagem 
            (nome, descricao, cps, sleep_time, wait_time, amd_enabled, timezone, horario_inicio, horario_fim, max_tentativas, ativo)
            VALUES 
            ('Configura√ß√£o Avan√ßada', 'Configura√ß√£o para campanhas de alto volume', 10.0, 0.5, 45.0, 1, 'America/Sao_Paulo', '09:00', '17:00', 5, 1)
        """)
        
        conn.commit()
        print('‚úÖ Dados padr√£o inseridos!')
        
        return True
        
    except Exception as e:
        print(f'‚ùå Erro na migra√ß√£o: {e}')
        conn.rollback()
        return False
    finally:
        conn.close()

if __name__ == "__main__":
    success = run_migration()
    if success:
        print("\nüéâ Migra√ß√£o conclu√≠da com sucesso!")
        print("Sistema pronto para configura√ß√µes avan√ßadas de discagem!")
    else:
        print("\nüí• Falha na migra√ß√£o!") 